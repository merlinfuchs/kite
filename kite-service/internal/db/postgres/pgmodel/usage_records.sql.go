// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: usage_records.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUsageRecord = `-- name: CreateUsageRecord :exec
INSERT INTO usage_records (
    type,
    app_id,
    command_id,
    event_listener_id,
    message_id,
    credits_used,
    created_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, type, app_id, command_id, event_listener_id, message_id, credits_used, created_at
`

type CreateUsageRecordParams struct {
	Type            string
	AppID           string
	CommandID       pgtype.Text
	EventListenerID pgtype.Text
	MessageID       pgtype.Text
	CreditsUsed     int32
	CreatedAt       pgtype.Timestamp
}

func (q *Queries) CreateUsageRecord(ctx context.Context, arg CreateUsageRecordParams) error {
	_, err := q.db.Exec(ctx, createUsageRecord,
		arg.Type,
		arg.AppID,
		arg.CommandID,
		arg.EventListenerID,
		arg.MessageID,
		arg.CreditsUsed,
		arg.CreatedAt,
	)
	return err
}

const getAllUsageCreditsUsedBetween = `-- name: GetAllUsageCreditsUsedBetween :many
SELECT app_id, SUM(credits_used) FROM usage_records WHERE created_at BETWEEN $1 AND $2 GROUP BY app_id
`

type GetAllUsageCreditsUsedBetweenParams struct {
	StartAt pgtype.Timestamp
	EndAt   pgtype.Timestamp
}

type GetAllUsageCreditsUsedBetweenRow struct {
	AppID string
	Sum   int64
}

func (q *Queries) GetAllUsageCreditsUsedBetween(ctx context.Context, arg GetAllUsageCreditsUsedBetweenParams) ([]GetAllUsageCreditsUsedBetweenRow, error) {
	rows, err := q.db.Query(ctx, getAllUsageCreditsUsedBetween, arg.StartAt, arg.EndAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsageCreditsUsedBetweenRow
	for rows.Next() {
		var i GetAllUsageCreditsUsedBetweenRow
		if err := rows.Scan(&i.AppID, &i.Sum); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsageCreditsUsedByAppBetween = `-- name: GetUsageCreditsUsedByAppBetween :one
SELECT COALESCE(SUM(credits_used), 0)::int FROM usage_records WHERE app_id = $1 AND created_at BETWEEN $2 AND $3
`

type GetUsageCreditsUsedByAppBetweenParams struct {
	AppID   string
	StartAt pgtype.Timestamp
	EndAt   pgtype.Timestamp
}

func (q *Queries) GetUsageCreditsUsedByAppBetween(ctx context.Context, arg GetUsageCreditsUsedByAppBetweenParams) (int32, error) {
	row := q.db.QueryRow(ctx, getUsageCreditsUsedByAppBetween, arg.AppID, arg.StartAt, arg.EndAt)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const getUsageCreditsUsedByDayBetween = `-- name: GetUsageCreditsUsedByDayBetween :many
SELECT 
    d.dt as date, 
    coalesce(u.credits_used, 0) as credits_used 
FROM (
    SELECT dt::date 
    FROM generate_series($1::timestamp, $2::timestamp, '1 day'::interval) dt
) d
LEFT JOIN (
    SELECT DATE(created_at) as date, SUM(credits_used) as credits_used 
    FROM usage_records 
    WHERE app_id = $3 AND created_at BETWEEN $1 AND $2 
    GROUP BY DATE(created_at)
) u ON d.dt = u.date
`

type GetUsageCreditsUsedByDayBetweenParams struct {
	StartAt pgtype.Timestamp
	EndAt   pgtype.Timestamp
	AppID   string
}

type GetUsageCreditsUsedByDayBetweenRow struct {
	Date        pgtype.Date
	CreditsUsed int64
}

func (q *Queries) GetUsageCreditsUsedByDayBetween(ctx context.Context, arg GetUsageCreditsUsedByDayBetweenParams) ([]GetUsageCreditsUsedByDayBetweenRow, error) {
	rows, err := q.db.Query(ctx, getUsageCreditsUsedByDayBetween, arg.StartAt, arg.EndAt, arg.AppID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsageCreditsUsedByDayBetweenRow
	for rows.Next() {
		var i GetUsageCreditsUsedByDayBetweenRow
		if err := rows.Scan(&i.Date, &i.CreditsUsed); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsageCreditsUsedByTypeBetween = `-- name: GetUsageCreditsUsedByTypeBetween :many
SELECT type, SUM(credits_used) FROM usage_records WHERE app_id = $1 AND created_at BETWEEN $2 AND $3 GROUP BY type
`

type GetUsageCreditsUsedByTypeBetweenParams struct {
	AppID   string
	StartAt pgtype.Timestamp
	EndAt   pgtype.Timestamp
}

type GetUsageCreditsUsedByTypeBetweenRow struct {
	Type string
	Sum  int64
}

func (q *Queries) GetUsageCreditsUsedByTypeBetween(ctx context.Context, arg GetUsageCreditsUsedByTypeBetweenParams) ([]GetUsageCreditsUsedByTypeBetweenRow, error) {
	rows, err := q.db.Query(ctx, getUsageCreditsUsedByTypeBetween, arg.AppID, arg.StartAt, arg.EndAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsageCreditsUsedByTypeBetweenRow
	for rows.Next() {
		var i GetUsageCreditsUsedByTypeBetweenRow
		if err := rows.Scan(&i.Type, &i.Sum); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsageRecordsByAppBetween = `-- name: GetUsageRecordsByAppBetween :many
SELECT id, type, app_id, command_id, event_listener_id, message_id, credits_used, created_at FROM usage_records WHERE app_id = $1 AND created_at BETWEEN $2 AND $3 ORDER BY created_at DESC
`

type GetUsageRecordsByAppBetweenParams struct {
	AppID   string
	StartAt pgtype.Timestamp
	EndAt   pgtype.Timestamp
}

func (q *Queries) GetUsageRecordsByAppBetween(ctx context.Context, arg GetUsageRecordsByAppBetweenParams) ([]UsageRecord, error) {
	rows, err := q.db.Query(ctx, getUsageRecordsByAppBetween, arg.AppID, arg.StartAt, arg.EndAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsageRecord
	for rows.Next() {
		var i UsageRecord
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.AppID,
			&i.CommandID,
			&i.EventListenerID,
			&i.MessageID,
			&i.CreditsUsed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

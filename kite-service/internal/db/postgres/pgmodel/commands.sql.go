// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: commands.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countCommandsByApp = `-- name: CountCommandsByApp :one
SELECT COUNT(*) FROM commands WHERE app_id = $1
`

func (q *Queries) CountCommandsByApp(ctx context.Context, appID string) (int64, error) {
	row := q.db.QueryRow(ctx, countCommandsByApp, appID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCommand = `-- name: CreateCommand :one
INSERT INTO commands (
    id,
    name,
    description,
    enabled,
    app_id,
    module_id,
    creator_user_id,
    flow_source,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, name, description, enabled, app_id, module_id, creator_user_id, flow_source, created_at, updated_at, last_deployed_at
`

type CreateCommandParams struct {
	ID            string
	Name          string
	Description   string
	Enabled       bool
	AppID         string
	ModuleID      pgtype.Text
	CreatorUserID string
	FlowSource    []byte
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
}

func (q *Queries) CreateCommand(ctx context.Context, arg CreateCommandParams) (Command, error) {
	row := q.db.QueryRow(ctx, createCommand,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Enabled,
		arg.AppID,
		arg.ModuleID,
		arg.CreatorUserID,
		arg.FlowSource,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Command
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Enabled,
		&i.AppID,
		&i.ModuleID,
		&i.CreatorUserID,
		&i.FlowSource,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastDeployedAt,
	)
	return i, err
}

const deleteCommand = `-- name: DeleteCommand :exec
DELETE FROM commands WHERE id = $1
`

func (q *Queries) DeleteCommand(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteCommand, id)
	return err
}

const getCommand = `-- name: GetCommand :one
SELECT id, name, description, enabled, app_id, module_id, creator_user_id, flow_source, created_at, updated_at, last_deployed_at FROM commands WHERE id = $1
`

func (q *Queries) GetCommand(ctx context.Context, id string) (Command, error) {
	row := q.db.QueryRow(ctx, getCommand, id)
	var i Command
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Enabled,
		&i.AppID,
		&i.ModuleID,
		&i.CreatorUserID,
		&i.FlowSource,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastDeployedAt,
	)
	return i, err
}

const getCommandsByApp = `-- name: GetCommandsByApp :many
SELECT id, name, description, enabled, app_id, module_id, creator_user_id, flow_source, created_at, updated_at, last_deployed_at FROM commands WHERE app_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetCommandsByApp(ctx context.Context, appID string) ([]Command, error) {
	rows, err := q.db.Query(ctx, getCommandsByApp, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Command
	for rows.Next() {
		var i Command
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Enabled,
			&i.AppID,
			&i.ModuleID,
			&i.CreatorUserID,
			&i.FlowSource,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastDeployedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEnabledCommandIDs = `-- name: GetEnabledCommandIDs :many
SELECT id FROM commands WHERE enabled = TRUE
`

func (q *Queries) GetEnabledCommandIDs(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getEnabledCommandIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEnabledCommandsUpdatesSince = `-- name: GetEnabledCommandsUpdatesSince :many
SELECT id, name, description, enabled, app_id, module_id, creator_user_id, flow_source, created_at, updated_at, last_deployed_at FROM commands WHERE enabled = TRUE AND updated_at > $1
`

func (q *Queries) GetEnabledCommandsUpdatesSince(ctx context.Context, updatedAt pgtype.Timestamp) ([]Command, error) {
	rows, err := q.db.Query(ctx, getEnabledCommandsUpdatesSince, updatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Command
	for rows.Next() {
		var i Command
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Enabled,
			&i.AppID,
			&i.ModuleID,
			&i.CreatorUserID,
			&i.FlowSource,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastDeployedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCommand = `-- name: UpdateCommand :one
UPDATE commands SET
    name = $2,
    description = $3,
    enabled = $4,
    flow_source = $5,
    updated_at = $6
WHERE id = $1 RETURNING id, name, description, enabled, app_id, module_id, creator_user_id, flow_source, created_at, updated_at, last_deployed_at
`

type UpdateCommandParams struct {
	ID          string
	Name        string
	Description string
	Enabled     bool
	FlowSource  []byte
	UpdatedAt   pgtype.Timestamp
}

func (q *Queries) UpdateCommand(ctx context.Context, arg UpdateCommandParams) (Command, error) {
	row := q.db.QueryRow(ctx, updateCommand,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Enabled,
		arg.FlowSource,
		arg.UpdatedAt,
	)
	var i Command
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Enabled,
		&i.AppID,
		&i.ModuleID,
		&i.CreatorUserID,
		&i.FlowSource,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastDeployedAt,
	)
	return i, err
}

const updateCommandsLastDeployedAt = `-- name: UpdateCommandsLastDeployedAt :exec
UPDATE commands SET
    last_deployed_at = $2
WHERE app_id = $1
`

type UpdateCommandsLastDeployedAtParams struct {
	AppID          string
	LastDeployedAt pgtype.Timestamp
}

func (q *Queries) UpdateCommandsLastDeployedAt(ctx context.Context, arg UpdateCommandsLastDeployedAtParams) error {
	_, err := q.db.Exec(ctx, updateCommandsLastDeployedAt, arg.AppID, arg.LastDeployedAt)
	return err
}

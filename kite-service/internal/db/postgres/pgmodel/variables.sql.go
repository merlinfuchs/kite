// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: variables.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countVariablesByApp = `-- name: CountVariablesByApp :one
SELECT COUNT(*) FROM variables WHERE app_id = $1
`

func (q *Queries) CountVariablesByApp(ctx context.Context, appID string) (int64, error) {
	row := q.db.QueryRow(ctx, countVariablesByApp, appID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createVariable = `-- name: CreateVariable :one
INSERT INTO variables (
    id,
    name,
    scope,
    type,
    app_id,
    module_id,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, scope, name, type, app_id, module_id, created_at, updated_at
`

type CreateVariableParams struct {
	ID        string
	Name      string
	Scope     string
	Type      string
	AppID     string
	ModuleID  pgtype.Text
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) CreateVariable(ctx context.Context, arg CreateVariableParams) (Variable, error) {
	row := q.db.QueryRow(ctx, createVariable,
		arg.ID,
		arg.Name,
		arg.Scope,
		arg.Type,
		arg.AppID,
		arg.ModuleID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Variable
	err := row.Scan(
		&i.ID,
		&i.Scope,
		&i.Name,
		&i.Type,
		&i.AppID,
		&i.ModuleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteVariable = `-- name: DeleteVariable :exec
DELETE FROM variables WHERE id = $1
`

func (q *Queries) DeleteVariable(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteVariable, id)
	return err
}

const getVariable = `-- name: GetVariable :one
SELECT id, scope, name, type, app_id, module_id, created_at, updated_at FROM variables WHERE id = $1
`

func (q *Queries) GetVariable(ctx context.Context, id string) (Variable, error) {
	row := q.db.QueryRow(ctx, getVariable, id)
	var i Variable
	err := row.Scan(
		&i.ID,
		&i.Scope,
		&i.Name,
		&i.Type,
		&i.AppID,
		&i.ModuleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVariableByName = `-- name: GetVariableByName :one
SELECT id, scope, name, type, app_id, module_id, created_at, updated_at FROM variables WHERE app_id = $1 AND name = $2
`

type GetVariableByNameParams struct {
	AppID string
	Name  string
}

func (q *Queries) GetVariableByName(ctx context.Context, arg GetVariableByNameParams) (Variable, error) {
	row := q.db.QueryRow(ctx, getVariableByName, arg.AppID, arg.Name)
	var i Variable
	err := row.Scan(
		&i.ID,
		&i.Scope,
		&i.Name,
		&i.Type,
		&i.AppID,
		&i.ModuleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVariablesByApp = `-- name: GetVariablesByApp :many
SELECT id, scope, name, type, app_id, module_id, created_at, updated_at FROM variables WHERE app_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetVariablesByApp(ctx context.Context, appID string) ([]Variable, error) {
	rows, err := q.db.Query(ctx, getVariablesByApp, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Variable
	for rows.Next() {
		var i Variable
		if err := rows.Scan(
			&i.ID,
			&i.Scope,
			&i.Name,
			&i.Type,
			&i.AppID,
			&i.ModuleID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVariable = `-- name: UpdateVariable :one
UPDATE variables SET
    name = $2,
    scope = $3,
    type = $4,
    updated_at = $5
WHERE id = $1 RETURNING id, scope, name, type, app_id, module_id, created_at, updated_at
`

type UpdateVariableParams struct {
	ID        string
	Name      string
	Scope     string
	Type      string
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateVariable(ctx context.Context, arg UpdateVariableParams) (Variable, error) {
	row := q.db.QueryRow(ctx, updateVariable,
		arg.ID,
		arg.Name,
		arg.Scope,
		arg.Type,
		arg.UpdatedAt,
	)
	var i Variable
	err := row.Scan(
		&i.ID,
		&i.Scope,
		&i.Name,
		&i.Type,
		&i.AppID,
		&i.ModuleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

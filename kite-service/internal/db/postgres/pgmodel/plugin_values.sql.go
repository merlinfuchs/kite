// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: plugin_values.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deletePluginValue = `-- name: DeletePluginValue :exec
DELETE FROM plugin_values WHERE plugin_instance_id = $1 AND key = $2
`

type DeletePluginValueParams struct {
	PluginInstanceID string
	Key              string
}

func (q *Queries) DeletePluginValue(ctx context.Context, arg DeletePluginValueParams) error {
	_, err := q.db.Exec(ctx, deletePluginValue, arg.PluginInstanceID, arg.Key)
	return err
}

const getPluginValue = `-- name: GetPluginValue :one
SELECT id, plugin_instance_id, key, value, created_at, updated_at FROM plugin_values WHERE plugin_instance_id = $1 AND key = $2
`

type GetPluginValueParams struct {
	PluginInstanceID string
	Key              string
}

func (q *Queries) GetPluginValue(ctx context.Context, arg GetPluginValueParams) (PluginValue, error) {
	row := q.db.QueryRow(ctx, getPluginValue, arg.PluginInstanceID, arg.Key)
	var i PluginValue
	err := row.Scan(
		&i.ID,
		&i.PluginInstanceID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPluginValueForUpdate = `-- name: GetPluginValueForUpdate :one
SELECT id, plugin_instance_id, key, value, created_at, updated_at FROM plugin_values WHERE plugin_instance_id = $1 AND key = $2 FOR UPDATE
`

type GetPluginValueForUpdateParams struct {
	PluginInstanceID string
	Key              string
}

func (q *Queries) GetPluginValueForUpdate(ctx context.Context, arg GetPluginValueForUpdateParams) (PluginValue, error) {
	row := q.db.QueryRow(ctx, getPluginValueForUpdate, arg.PluginInstanceID, arg.Key)
	var i PluginValue
	err := row.Scan(
		&i.ID,
		&i.PluginInstanceID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setPluginValue = `-- name: SetPluginValue :one
INSERT INTO plugin_values (
    plugin_instance_id,
    key,
    value,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5
) ON CONFLICT (plugin_instance_id, key) DO UPDATE SET
    value = EXCLUDED.value,
    updated_at = EXCLUDED.updated_at
RETURNING id, plugin_instance_id, key, value, created_at, updated_at
`

type SetPluginValueParams struct {
	PluginInstanceID string
	Key              string
	Value            []byte
	CreatedAt        pgtype.Timestamp
	UpdatedAt        pgtype.Timestamp
}

func (q *Queries) SetPluginValue(ctx context.Context, arg SetPluginValueParams) (PluginValue, error) {
	row := q.db.QueryRow(ctx, setPluginValue,
		arg.PluginInstanceID,
		arg.Key,
		arg.Value,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i PluginValue
	err := row.Scan(
		&i.ID,
		&i.PluginInstanceID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

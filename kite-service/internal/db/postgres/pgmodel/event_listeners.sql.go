// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: event_listeners.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countEventListenersByApp = `-- name: CountEventListenersByApp :one
SELECT COUNT(*) FROM event_listeners WHERE app_id = $1
`

func (q *Queries) CountEventListenersByApp(ctx context.Context, appID string) (int64, error) {
	row := q.db.QueryRow(ctx, countEventListenersByApp, appID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createEventListener = `-- name: CreateEventListener :one
INSERT INTO event_listeners (
    id,
    source,
    type,
    description,
    enabled,
    app_id,
    module_id,
    creator_user_id,
    filter,
    flow_source,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) RETURNING id, source, type, description, enabled, app_id, module_id, creator_user_id, filter, flow_source, created_at, updated_at
`

type CreateEventListenerParams struct {
	ID            string
	Source        string
	Type          string
	Description   string
	Enabled       bool
	AppID         string
	ModuleID      pgtype.Text
	CreatorUserID string
	Filter        []byte
	FlowSource    []byte
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
}

func (q *Queries) CreateEventListener(ctx context.Context, arg CreateEventListenerParams) (EventListener, error) {
	row := q.db.QueryRow(ctx, createEventListener,
		arg.ID,
		arg.Source,
		arg.Type,
		arg.Description,
		arg.Enabled,
		arg.AppID,
		arg.ModuleID,
		arg.CreatorUserID,
		arg.Filter,
		arg.FlowSource,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i EventListener
	err := row.Scan(
		&i.ID,
		&i.Source,
		&i.Type,
		&i.Description,
		&i.Enabled,
		&i.AppID,
		&i.ModuleID,
		&i.CreatorUserID,
		&i.Filter,
		&i.FlowSource,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEventListener = `-- name: DeleteEventListener :exec
DELETE FROM event_listeners WHERE id = $1
`

func (q *Queries) DeleteEventListener(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteEventListener, id)
	return err
}

const getEnabledEventListenerIDs = `-- name: GetEnabledEventListenerIDs :many
SELECT id FROM event_listeners WHERE enabled = TRUE
`

func (q *Queries) GetEnabledEventListenerIDs(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getEnabledEventListenerIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEnabledEventListenersUpdatesSince = `-- name: GetEnabledEventListenersUpdatesSince :many
SELECT id, source, type, description, enabled, app_id, module_id, creator_user_id, filter, flow_source, created_at, updated_at FROM event_listeners WHERE enabled = TRUE AND updated_at > $1
`

func (q *Queries) GetEnabledEventListenersUpdatesSince(ctx context.Context, updatedAt pgtype.Timestamp) ([]EventListener, error) {
	rows, err := q.db.Query(ctx, getEnabledEventListenersUpdatesSince, updatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventListener
	for rows.Next() {
		var i EventListener
		if err := rows.Scan(
			&i.ID,
			&i.Source,
			&i.Type,
			&i.Description,
			&i.Enabled,
			&i.AppID,
			&i.ModuleID,
			&i.CreatorUserID,
			&i.Filter,
			&i.FlowSource,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventListener = `-- name: GetEventListener :one
SELECT id, source, type, description, enabled, app_id, module_id, creator_user_id, filter, flow_source, created_at, updated_at FROM event_listeners WHERE id = $1
`

func (q *Queries) GetEventListener(ctx context.Context, id string) (EventListener, error) {
	row := q.db.QueryRow(ctx, getEventListener, id)
	var i EventListener
	err := row.Scan(
		&i.ID,
		&i.Source,
		&i.Type,
		&i.Description,
		&i.Enabled,
		&i.AppID,
		&i.ModuleID,
		&i.CreatorUserID,
		&i.Filter,
		&i.FlowSource,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEventListenersByApp = `-- name: GetEventListenersByApp :many
SELECT id, source, type, description, enabled, app_id, module_id, creator_user_id, filter, flow_source, created_at, updated_at FROM event_listeners WHERE app_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetEventListenersByApp(ctx context.Context, appID string) ([]EventListener, error) {
	rows, err := q.db.Query(ctx, getEventListenersByApp, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventListener
	for rows.Next() {
		var i EventListener
		if err := rows.Scan(
			&i.ID,
			&i.Source,
			&i.Type,
			&i.Description,
			&i.Enabled,
			&i.AppID,
			&i.ModuleID,
			&i.CreatorUserID,
			&i.Filter,
			&i.FlowSource,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEventListener = `-- name: UpdateEventListener :one
UPDATE event_listeners SET
    enabled = $2,
    type = $3,
    filter = $4,
    description = $5,
    flow_source = $6,
    updated_at = $7
WHERE id = $1 RETURNING id, source, type, description, enabled, app_id, module_id, creator_user_id, filter, flow_source, created_at, updated_at
`

type UpdateEventListenerParams struct {
	ID          string
	Enabled     bool
	Type        string
	Filter      []byte
	Description string
	FlowSource  []byte
	UpdatedAt   pgtype.Timestamp
}

func (q *Queries) UpdateEventListener(ctx context.Context, arg UpdateEventListenerParams) (EventListener, error) {
	row := q.db.QueryRow(ctx, updateEventListener,
		arg.ID,
		arg.Enabled,
		arg.Type,
		arg.Filter,
		arg.Description,
		arg.FlowSource,
		arg.UpdatedAt,
	)
	var i EventListener
	err := row.Scan(
		&i.ID,
		&i.Source,
		&i.Type,
		&i.Description,
		&i.Enabled,
		&i.AppID,
		&i.ModuleID,
		&i.CreatorUserID,
		&i.Filter,
		&i.FlowSource,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

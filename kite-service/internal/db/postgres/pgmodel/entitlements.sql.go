// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: entitlements.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getActiveEntitlements = `-- name: GetActiveEntitlements :many
SELECT id, type, subscription_id, app_id, plan_id, created_at, updated_at, ends_at FROM entitlements WHERE app_id = $1 AND ends_at IS NULL OR ends_at > $2 ORDER BY created_at DESC
`

type GetActiveEntitlementsParams struct {
	AppID  string
	EndsAt pgtype.Timestamp
}

func (q *Queries) GetActiveEntitlements(ctx context.Context, arg GetActiveEntitlementsParams) ([]Entitlement, error) {
	rows, err := q.db.Query(ctx, getActiveEntitlements, arg.AppID, arg.EndsAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entitlement
	for rows.Next() {
		var i Entitlement
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.SubscriptionID,
			&i.AppID,
			&i.PlanID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.EndsAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntitlements = `-- name: GetEntitlements :many
SELECT id, type, subscription_id, app_id, plan_id, created_at, updated_at, ends_at FROM entitlements WHERE app_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetEntitlements(ctx context.Context, appID string) ([]Entitlement, error) {
	rows, err := q.db.Query(ctx, getEntitlements, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entitlement
	for rows.Next() {
		var i Entitlement
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.SubscriptionID,
			&i.AppID,
			&i.PlanID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.EndsAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscriptionEntitlement = `-- name: UpdateSubscriptionEntitlement :one
UPDATE entitlements SET
    plan_id = $2,
    updated_at = $3,
    ends_at = $4
WHERE subscription_id = $1 RETURNING id, type, subscription_id, app_id, plan_id, created_at, updated_at, ends_at
`

type UpdateSubscriptionEntitlementParams struct {
	SubscriptionID pgtype.Text
	PlanID         string
	UpdatedAt      pgtype.Timestamp
	EndsAt         pgtype.Timestamp
}

func (q *Queries) UpdateSubscriptionEntitlement(ctx context.Context, arg UpdateSubscriptionEntitlementParams) (Entitlement, error) {
	row := q.db.QueryRow(ctx, updateSubscriptionEntitlement,
		arg.SubscriptionID,
		arg.PlanID,
		arg.UpdatedAt,
		arg.EndsAt,
	)
	var i Entitlement
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.SubscriptionID,
		&i.AppID,
		&i.PlanID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EndsAt,
	)
	return i, err
}

const upsertSubscriptionEntitlement = `-- name: UpsertSubscriptionEntitlement :one
INSERT INTO entitlements (
    id,
    type,
    subscription_id,
    app_id,
    plan_id,
    created_at,
    updated_at,
    ends_at
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8) 
ON CONFLICT (subscription_id, app_id) DO UPDATE SET 
    plan_id = EXCLUDED.plan_id,
    updated_at = EXCLUDED.updated_at,
    ends_at = EXCLUDED.ends_at
RETURNING id, type, subscription_id, app_id, plan_id, created_at, updated_at, ends_at
`

type UpsertSubscriptionEntitlementParams struct {
	ID             string
	Type           string
	SubscriptionID pgtype.Text
	AppID          string
	PlanID         string
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	EndsAt         pgtype.Timestamp
}

func (q *Queries) UpsertSubscriptionEntitlement(ctx context.Context, arg UpsertSubscriptionEntitlementParams) (Entitlement, error) {
	row := q.db.QueryRow(ctx, upsertSubscriptionEntitlement,
		arg.ID,
		arg.Type,
		arg.SubscriptionID,
		arg.AppID,
		arg.PlanID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.EndsAt,
	)
	var i Entitlement
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.SubscriptionID,
		&i.AppID,
		&i.PlanID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EndsAt,
	)
	return i, err
}

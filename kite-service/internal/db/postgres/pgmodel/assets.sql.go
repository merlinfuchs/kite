// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: assets.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAssetsByContentHash = `-- name: CountAssetsByContentHash :one
SELECT COUNT(*) FROM assets WHERE content_hash = $1
`

func (q *Queries) CountAssetsByContentHash(ctx context.Context, contentHash string) (int64, error) {
	row := q.db.QueryRow(ctx, countAssetsByContentHash, contentHash)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAsset = `-- name: CreateAsset :one
INSERT INTO assets (
    id,
    name,
    content_hash,
    content_type,
    content_size,
    app_id,
    module_id,
    creator_user_id,
    created_at,
    updated_at,
    expires_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, name, content_hash, content_type, content_size, app_id, module_id, creator_user_id, created_at, updated_at, expires_at
`

type CreateAssetParams struct {
	ID            string
	Name          string
	ContentHash   string
	ContentType   string
	ContentSize   int32
	AppID         string
	ModuleID      pgtype.Text
	CreatorUserID string
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
	ExpiresAt     pgtype.Timestamp
}

func (q *Queries) CreateAsset(ctx context.Context, arg CreateAssetParams) (Asset, error) {
	row := q.db.QueryRow(ctx, createAsset,
		arg.ID,
		arg.Name,
		arg.ContentHash,
		arg.ContentType,
		arg.ContentSize,
		arg.AppID,
		arg.ModuleID,
		arg.CreatorUserID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ExpiresAt,
	)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ContentHash,
		&i.ContentType,
		&i.ContentSize,
		&i.AppID,
		&i.ModuleID,
		&i.CreatorUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteAsset = `-- name: DeleteAsset :one
DELETE FROM assets WHERE id = $1 RETURNING id, name, content_hash, content_type, content_size, app_id, module_id, creator_user_id, created_at, updated_at, expires_at
`

func (q *Queries) DeleteAsset(ctx context.Context, id string) (Asset, error) {
	row := q.db.QueryRow(ctx, deleteAsset, id)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ContentHash,
		&i.ContentType,
		&i.ContentSize,
		&i.AppID,
		&i.ModuleID,
		&i.CreatorUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getAsset = `-- name: GetAsset :one
SELECT id, name, content_hash, content_type, content_size, app_id, module_id, creator_user_id, created_at, updated_at, expires_at FROM assets WHERE id = $1
`

func (q *Queries) GetAsset(ctx context.Context, id string) (Asset, error) {
	row := q.db.QueryRow(ctx, getAsset, id)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ContentHash,
		&i.ContentType,
		&i.ContentSize,
		&i.AppID,
		&i.ModuleID,
		&i.CreatorUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getExpiredAssets = `-- name: GetExpiredAssets :many
SELECT id, name, content_hash, content_type, content_size, app_id, module_id, creator_user_id, created_at, updated_at, expires_at FROM assets WHERE expires_at < $1
`

func (q *Queries) GetExpiredAssets(ctx context.Context, expiresAt pgtype.Timestamp) ([]Asset, error) {
	rows, err := q.db.Query(ctx, getExpiredAssets, expiresAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Asset
	for rows.Next() {
		var i Asset
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ContentHash,
			&i.ContentType,
			&i.ContentSize,
			&i.AppID,
			&i.ModuleID,
			&i.CreatorUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

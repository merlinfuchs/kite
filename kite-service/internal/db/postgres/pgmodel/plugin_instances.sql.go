// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: plugin_instances.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPluginInstancesByApp = `-- name: CountPluginInstancesByApp :one
SELECT COUNT(*) FROM plugin_instances WHERE app_id = $1
`

func (q *Queries) CountPluginInstancesByApp(ctx context.Context, appID string) (int64, error) {
	row := q.db.QueryRow(ctx, countPluginInstancesByApp, appID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPluginInstance = `-- name: CreatePluginInstance :one
INSERT INTO plugin_instances (
    id,
    plugin_id,
    enabled,
    app_id,
    creator_user_id,
    config,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, plugin_id, enabled, app_id, creator_user_id, config, created_at, updated_at, last_deployed_at
`

type CreatePluginInstanceParams struct {
	ID            string
	PluginID      string
	Enabled       bool
	AppID         string
	CreatorUserID string
	Config        []byte
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
}

func (q *Queries) CreatePluginInstance(ctx context.Context, arg CreatePluginInstanceParams) (PluginInstance, error) {
	row := q.db.QueryRow(ctx, createPluginInstance,
		arg.ID,
		arg.PluginID,
		arg.Enabled,
		arg.AppID,
		arg.CreatorUserID,
		arg.Config,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i PluginInstance
	err := row.Scan(
		&i.ID,
		&i.PluginID,
		&i.Enabled,
		&i.AppID,
		&i.CreatorUserID,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastDeployedAt,
	)
	return i, err
}

const deletePluginInstance = `-- name: DeletePluginInstance :exec
DELETE FROM plugin_instances WHERE id = $1
`

func (q *Queries) DeletePluginInstance(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deletePluginInstance, id)
	return err
}

const getEnabledPluginInstanceIDs = `-- name: GetEnabledPluginInstanceIDs :many
SELECT id FROM plugin_instances WHERE enabled = TRUE
`

func (q *Queries) GetEnabledPluginInstanceIDs(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getEnabledPluginInstanceIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEnabledPluginInstancesUpdatesSince = `-- name: GetEnabledPluginInstancesUpdatesSince :many
SELECT id, plugin_id, enabled, app_id, creator_user_id, config, created_at, updated_at, last_deployed_at FROM plugin_instances WHERE enabled = TRUE AND updated_at > $1
`

func (q *Queries) GetEnabledPluginInstancesUpdatesSince(ctx context.Context, updatedAt pgtype.Timestamp) ([]PluginInstance, error) {
	rows, err := q.db.Query(ctx, getEnabledPluginInstancesUpdatesSince, updatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PluginInstance
	for rows.Next() {
		var i PluginInstance
		if err := rows.Scan(
			&i.ID,
			&i.PluginID,
			&i.Enabled,
			&i.AppID,
			&i.CreatorUserID,
			&i.Config,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastDeployedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPluginInstance = `-- name: GetPluginInstance :one
SELECT id, plugin_id, enabled, app_id, creator_user_id, config, created_at, updated_at, last_deployed_at FROM plugin_instances WHERE id = $1
`

func (q *Queries) GetPluginInstance(ctx context.Context, id string) (PluginInstance, error) {
	row := q.db.QueryRow(ctx, getPluginInstance, id)
	var i PluginInstance
	err := row.Scan(
		&i.ID,
		&i.PluginID,
		&i.Enabled,
		&i.AppID,
		&i.CreatorUserID,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastDeployedAt,
	)
	return i, err
}

const getPluginInstancesByApp = `-- name: GetPluginInstancesByApp :many
SELECT id, plugin_id, enabled, app_id, creator_user_id, config, created_at, updated_at, last_deployed_at FROM plugin_instances WHERE app_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetPluginInstancesByApp(ctx context.Context, appID string) ([]PluginInstance, error) {
	rows, err := q.db.Query(ctx, getPluginInstancesByApp, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PluginInstance
	for rows.Next() {
		var i PluginInstance
		if err := rows.Scan(
			&i.ID,
			&i.PluginID,
			&i.Enabled,
			&i.AppID,
			&i.CreatorUserID,
			&i.Config,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastDeployedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePluginInstance = `-- name: UpdatePluginInstance :one
UPDATE plugin_instances SET
    enabled = $2,
    config = $3,
    updated_at = $4
WHERE id = $1 RETURNING id, plugin_id, enabled, app_id, creator_user_id, config, created_at, updated_at, last_deployed_at
`

type UpdatePluginInstanceParams struct {
	ID        string
	Enabled   bool
	Config    []byte
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdatePluginInstance(ctx context.Context, arg UpdatePluginInstanceParams) (PluginInstance, error) {
	row := q.db.QueryRow(ctx, updatePluginInstance,
		arg.ID,
		arg.Enabled,
		arg.Config,
		arg.UpdatedAt,
	)
	var i PluginInstance
	err := row.Scan(
		&i.ID,
		&i.PluginID,
		&i.Enabled,
		&i.AppID,
		&i.CreatorUserID,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastDeployedAt,
	)
	return i, err
}

const updatePluginInstancesLastDeployedAt = `-- name: UpdatePluginInstancesLastDeployedAt :exec
UPDATE plugin_instances SET
    last_deployed_at = $2
WHERE app_id = $1
`

type UpdatePluginInstancesLastDeployedAtParams struct {
	AppID          string
	LastDeployedAt pgtype.Timestamp
}

func (q *Queries) UpdatePluginInstancesLastDeployedAt(ctx context.Context, arg UpdatePluginInstancesLastDeployedAtParams) error {
	_, err := q.db.Exec(ctx, updatePluginInstancesLastDeployedAt, arg.AppID, arg.LastDeployedAt)
	return err
}

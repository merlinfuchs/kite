// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: collaborators.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countCollaboratorsByApp = `-- name: CountCollaboratorsByApp :one
SELECT COUNT(*) FROM collaborators
WHERE app_id = $1
`

func (q *Queries) CountCollaboratorsByApp(ctx context.Context, appID string) (int64, error) {
	row := q.db.QueryRow(ctx, countCollaboratorsByApp, appID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCollaborator = `-- name: CreateCollaborator :one
INSERT INTO collaborators (app_id, user_id, role, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING user_id, app_id, role, created_at, updated_at
`

type CreateCollaboratorParams struct {
	AppID     string
	UserID    string
	Role      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) CreateCollaborator(ctx context.Context, arg CreateCollaboratorParams) (Collaborator, error) {
	row := q.db.QueryRow(ctx, createCollaborator,
		arg.AppID,
		arg.UserID,
		arg.Role,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Collaborator
	err := row.Scan(
		&i.UserID,
		&i.AppID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCollaborator = `-- name: DeleteCollaborator :exec
DELETE FROM collaborators
WHERE app_id = $1 AND user_id = $2
`

type DeleteCollaboratorParams struct {
	AppID  string
	UserID string
}

func (q *Queries) DeleteCollaborator(ctx context.Context, arg DeleteCollaboratorParams) error {
	_, err := q.db.Exec(ctx, deleteCollaborator, arg.AppID, arg.UserID)
	return err
}

const getCollaborator = `-- name: GetCollaborator :one
SELECT collaborators.user_id, collaborators.app_id, collaborators.role, collaborators.created_at, collaborators.updated_at, users.id, users.email, users.display_name, users.discord_id, users.discord_username, users.discord_avatar, users.created_at, users.updated_at FROM collaborators
LEFT JOIN users ON collaborators.user_id = users.id
WHERE app_id = $1 AND user_id = $2
`

type GetCollaboratorParams struct {
	AppID  string
	UserID string
}

type GetCollaboratorRow struct {
	Collaborator Collaborator
	User         User
}

func (q *Queries) GetCollaborator(ctx context.Context, arg GetCollaboratorParams) (GetCollaboratorRow, error) {
	row := q.db.QueryRow(ctx, getCollaborator, arg.AppID, arg.UserID)
	var i GetCollaboratorRow
	err := row.Scan(
		&i.Collaborator.UserID,
		&i.Collaborator.AppID,
		&i.Collaborator.Role,
		&i.Collaborator.CreatedAt,
		&i.Collaborator.UpdatedAt,
		&i.User.ID,
		&i.User.Email,
		&i.User.DisplayName,
		&i.User.DiscordID,
		&i.User.DiscordUsername,
		&i.User.DiscordAvatar,
		&i.User.CreatedAt,
		&i.User.UpdatedAt,
	)
	return i, err
}

const getCollaboratorsByApp = `-- name: GetCollaboratorsByApp :many
SELECT collaborators.user_id, collaborators.app_id, collaborators.role, collaborators.created_at, collaborators.updated_at, users.id, users.email, users.display_name, users.discord_id, users.discord_username, users.discord_avatar, users.created_at, users.updated_at FROM collaborators
LEFT JOIN users ON collaborators.user_id = users.id
WHERE app_id = $1
`

type GetCollaboratorsByAppRow struct {
	Collaborator Collaborator
	User         User
}

func (q *Queries) GetCollaboratorsByApp(ctx context.Context, appID string) ([]GetCollaboratorsByAppRow, error) {
	rows, err := q.db.Query(ctx, getCollaboratorsByApp, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCollaboratorsByAppRow
	for rows.Next() {
		var i GetCollaboratorsByAppRow
		if err := rows.Scan(
			&i.Collaborator.UserID,
			&i.Collaborator.AppID,
			&i.Collaborator.Role,
			&i.Collaborator.CreatedAt,
			&i.Collaborator.UpdatedAt,
			&i.User.ID,
			&i.User.Email,
			&i.User.DisplayName,
			&i.User.DiscordID,
			&i.User.DiscordUsername,
			&i.User.DiscordAvatar,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCollaborator = `-- name: UpdateCollaborator :one
UPDATE collaborators
SET role = $3, updated_at = $4
WHERE app_id = $1 AND user_id = $2
RETURNING user_id, app_id, role, created_at, updated_at
`

type UpdateCollaboratorParams struct {
	AppID     string
	UserID    string
	Role      string
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateCollaborator(ctx context.Context, arg UpdateCollaboratorParams) (Collaborator, error) {
	row := q.db.QueryRow(ctx, updateCollaborator,
		arg.AppID,
		arg.UserID,
		arg.Role,
		arg.UpdatedAt,
	)
	var i Collaborator
	err := row.Scan(
		&i.UserID,
		&i.AppID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (key_hash, user_id, created_at, expires_at) VALUES ($1, $2, $3, $4) RETURNING key_hash, user_id, created_at, expires_at
`

type CreateSessionParams struct {
	KeyHash   string
	UserID    string
	CreatedAt pgtype.Timestamp
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.KeyHash,
		arg.UserID,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.KeyHash,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE key_hash = $1
`

func (q *Queries) DeleteSession(ctx context.Context, keyHash string) error {
	_, err := q.db.Exec(ctx, deleteSession, keyHash)
	return err
}

const getSession = `-- name: GetSession :one
SELECT key_hash, user_id, created_at, expires_at FROM sessions WHERE key_hash = $1
`

func (q *Queries) GetSession(ctx context.Context, keyHash string) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, keyHash)
	var i Session
	err := row.Scan(
		&i.KeyHash,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: messages.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countMessagesByApp = `-- name: CountMessagesByApp :one
SELECT COUNT(*) FROM messages WHERE app_id = $1
`

func (q *Queries) CountMessagesByApp(ctx context.Context, appID string) (int64, error) {
	row := q.db.QueryRow(ctx, countMessagesByApp, appID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMessage = `-- name: CreateMessage :one
/*
 id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,

    data JSONB NOT NULL, -- message data
    flow_sources JSONB NOT NULL, -- map of flow source ids to flow source objects

    app_id TEXT NOT NULL REFERENCES apps(id) ON DELETE CASCADE,
    module_id TEXT REFERENCES modules(id) ON DELETE SET NULL,

    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL
    */

INSERT INTO messages (
    id,
    name,
    description,
    app_id,
    module_id,
    creator_user_id,
    data,
    flow_sources,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, name, description, data, flow_sources, app_id, module_id, creator_user_id, created_at, updated_at
`

type CreateMessageParams struct {
	ID            string
	Name          string
	Description   pgtype.Text
	AppID         string
	ModuleID      pgtype.Text
	CreatorUserID string
	Data          []byte
	FlowSources   []byte
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.AppID,
		arg.ModuleID,
		arg.CreatorUserID,
		arg.Data,
		arg.FlowSources,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Data,
		&i.FlowSources,
		&i.AppID,
		&i.ModuleID,
		&i.CreatorUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteMessage, id)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT id, name, description, data, flow_sources, app_id, module_id, creator_user_id, created_at, updated_at FROM messages WHERE id = $1
`

func (q *Queries) GetMessage(ctx context.Context, id string) (Message, error) {
	row := q.db.QueryRow(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Data,
		&i.FlowSources,
		&i.AppID,
		&i.ModuleID,
		&i.CreatorUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMessagesByApp = `-- name: GetMessagesByApp :many
SELECT id, name, description, data, flow_sources, app_id, module_id, creator_user_id, created_at, updated_at FROM messages WHERE app_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetMessagesByApp(ctx context.Context, appID string) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesByApp, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Data,
			&i.FlowSources,
			&i.AppID,
			&i.ModuleID,
			&i.CreatorUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE messages SET
    name = $2,
    description = $3,
    data = $4,
    flow_sources = $5,
    updated_at = $6
WHERE id = $1 RETURNING id, name, description, data, flow_sources, app_id, module_id, creator_user_id, created_at, updated_at
`

type UpdateMessageParams struct {
	ID          string
	Name        string
	Description pgtype.Text
	Data        []byte
	FlowSources []byte
	UpdatedAt   pgtype.Timestamp
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, updateMessage,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Data,
		arg.FlowSources,
		arg.UpdatedAt,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Data,
		&i.FlowSources,
		&i.AppID,
		&i.ModuleID,
		&i.CreatorUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

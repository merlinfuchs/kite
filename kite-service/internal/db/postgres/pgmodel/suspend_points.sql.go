// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: suspend_points.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSuspendPoint = `-- name: CreateSuspendPoint :one
INSERT INTO suspend_points (
    id, 
    type,
    app_id, 
    command_id, 
    event_listener_id, 
    message_id, 
    flow_source_id, 
    flow_node_id, 
    flow_state, 
    created_at, 
    expires_at
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, type, app_id, command_id, event_listener_id, message_id, flow_source_id, flow_node_id, flow_state, created_at, expires_at
`

type CreateSuspendPointParams struct {
	ID              string
	Type            string
	AppID           string
	CommandID       pgtype.Text
	EventListenerID pgtype.Text
	MessageID       pgtype.Text
	FlowSourceID    pgtype.Text
	FlowNodeID      string
	FlowState       []byte
	CreatedAt       pgtype.Timestamp
	ExpiresAt       pgtype.Timestamp
}

func (q *Queries) CreateSuspendPoint(ctx context.Context, arg CreateSuspendPointParams) (SuspendPoint, error) {
	row := q.db.QueryRow(ctx, createSuspendPoint,
		arg.ID,
		arg.Type,
		arg.AppID,
		arg.CommandID,
		arg.EventListenerID,
		arg.MessageID,
		arg.FlowSourceID,
		arg.FlowNodeID,
		arg.FlowState,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i SuspendPoint
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.AppID,
		&i.CommandID,
		&i.EventListenerID,
		&i.MessageID,
		&i.FlowSourceID,
		&i.FlowNodeID,
		&i.FlowState,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteExpiredSuspendPoints = `-- name: DeleteExpiredSuspendPoints :exec
DELETE FROM suspend_points WHERE expires_at < $1
`

func (q *Queries) DeleteExpiredSuspendPoints(ctx context.Context, expiresAt pgtype.Timestamp) error {
	_, err := q.db.Exec(ctx, deleteExpiredSuspendPoints, expiresAt)
	return err
}

const deleteSuspendPoint = `-- name: DeleteSuspendPoint :exec
DELETE FROM suspend_points WHERE id = $1
`

func (q *Queries) DeleteSuspendPoint(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteSuspendPoint, id)
	return err
}

const suspendPoint = `-- name: SuspendPoint :one
SELECT id, type, app_id, command_id, event_listener_id, message_id, flow_source_id, flow_node_id, flow_state, created_at, expires_at FROM suspend_points WHERE id = $1
`

func (q *Queries) SuspendPoint(ctx context.Context, id string) (SuspendPoint, error) {
	row := q.db.QueryRow(ctx, suspendPoint, id)
	var i SuspendPoint
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.AppID,
		&i.CommandID,
		&i.EventListenerID,
		&i.MessageID,
		&i.FlowSourceID,
		&i.FlowNodeID,
		&i.FlowState,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

// Code generated by tygo. DO NOT EDIT.
type StringIndexable = Record<string, unknown>;

//////////
// source: data.go

export interface FlowData {
  nodes: FlowNode[];
  edges: FlowEdge[];
}
export type FlowNodeType = string;
export const FlowNodeTypeEntryCommand: FlowNodeType = "entry_command";
export const FlowNodeTypeEntryEvent: FlowNodeType = "entry_event";
export const FlowNodeTypeEntryComponentButton: FlowNodeType = "entry_component_button";
export const FlowNodeTypeOptionCommandArgument: FlowNodeType = "option_command_argument";
export const FlowNodeTypeOptionCommandPermissions: FlowNodeType = "option_command_permissions";
export const FlowNodeTypeOptionCommandContexts: FlowNodeType = "option_command_contexts";
export const FlowNodeTypeOptionEventFilter: FlowNodeType = "option_event_filter";
export const FlowNodeTypeActionResponseCreate: FlowNodeType = "action_response_create";
export const FlowNodeTypeActionResponseEdit: FlowNodeType = "action_response_edit";
export const FlowNodeTypeActionResponseDelete: FlowNodeType = "action_response_delete";
export const FlowNodeTypeActionResponseDefer: FlowNodeType = "action_response_defer";
export const FlowNodeTypeActionMessageCreate: FlowNodeType = "action_message_create";
export const FlowNodeTypeActionMessageEdit: FlowNodeType = "action_message_edit";
export const FlowNodeTypeActionMessageDelete: FlowNodeType = "action_message_delete";
export const FlowNodeTypeActionPrivateMessageCreate: FlowNodeType = "action_private_message_create";
export const FlowNodeTypeActionMemberBan: FlowNodeType = "action_member_ban";
export const FlowNodeTypeActionMemberUnban: FlowNodeType = "action_member_unban";
export const FlowNodeTypeActionMemberKick: FlowNodeType = "action_member_kick";
export const FlowNodeTypeActionMemberTimeout: FlowNodeType = "action_member_timeout";
export const FlowNodeTypeActionMemberEdit: FlowNodeType = "action_member_edit";
export const FlowNodeTypeActionMemberRoleAdd: FlowNodeType = "action_member_role_add";
export const FlowNodeTypeActionMemberRoleRemove: FlowNodeType = "action_member_role_remove";
export const FlowNodeTypeActionHTTPRequest: FlowNodeType = "action_http_request";
export const FlowNodeTypeActionAIChatCompletion: FlowNodeType = "action_ai_chat_completion";
export const FlowNodeTypeActionExpressionEvaluate: FlowNodeType = "action_expression_evaluate";
export const FlowNodeTypeActionRandomGenerate: FlowNodeType = "action_random_generate";
export const FlowNodeTypeActionLog: FlowNodeType = "action_log";
export const FlowNodeTypeActionVariableSet: FlowNodeType = "action_variable_set";
export const FlowNodeTypeActionVariableDelete: FlowNodeType = "action_variable_delete";
export const FlowNodeTypeActionVariableGet: FlowNodeType = "action_variable_get";
export const FlowNodeTypeControlConditionCompare: FlowNodeType = "control_condition_compare";
export const FlowNodeTypeControlConditionItemCompare: FlowNodeType = "control_condition_item_compare";
export const FlowNodeTypeControlConditionUser: FlowNodeType = "control_condition_user";
export const FlowNodeTypeControlConditionItemUser: FlowNodeType = "control_condition_item_user";
export const FlowNodeTypeControlConditionChannel: FlowNodeType = "control_condition_channel";
export const FlowNodeTypeControlConditionItemChannel: FlowNodeType = "control_condition_item_channel";
export const FlowNodeTypeControlConditionRole: FlowNodeType = "control_condition_role";
export const FlowNodeTypeControlConditionItemRole: FlowNodeType = "control_condition_item_role";
export const FlowNodeTypeControlConditionItemElse: FlowNodeType = "control_condition_item_else";
export const FlowNodeTypeControlLoop: FlowNodeType = "control_loop";
export const FlowNodeTypeControlLoopEach: FlowNodeType = "control_loop_each";
export const FlowNodeTypeControlLoopEnd: FlowNodeType = "control_loop_end";
export const FlowNodeTypeControlLoopExit: FlowNodeType = "control_loop_exit";
export const FlowNodeTypeControlSleep: FlowNodeType = "control_sleep";
export const FlowNodeTypeSuspendResponseModal: FlowNodeType = "suspend_response_modal";
export interface FlowNode {
  id: string;
  type?: FlowNodeType;
  data: FlowNodeData & StringIndexable;
  position: FlowNodePosition;
}
export interface FlowNodeData {
  /**
   * Shared
   */
  name?: string;
  description?: string;
  custom_label?: string;
  audit_log_reason?: string;
  /**
   * Command Argument
   */
  command_argument_type?: CommandArgumentType;
  command_argument_required?: boolean;
  /**
   * Command Permissions
   */
  command_permissions?: string;
  /**
   * Command Contexts
   */
  command_disabled_contexts?: CommandContextType[];
  /**
   * Command Installations
   */
  command_disabled_integrations?: CommandDisabledIntegrationType[];
  /**
   * Message & Response Create, edit, Delete
   */
  message_target?: string;
  message_data?: any /* message.MessageData */;
  message_template_id?: string;
  message_ephemeral?: boolean;
  /**
   * Modal
   */
  modal_data?: ModalData;
  /**
   * Member Ban, Kick, Timeout, Edit
   */
  user_target?: string;
  member_ban_delete_message_duration_seconds?: string;
  member_timeout_duration_seconds?: string;
  member_data?: any /* api.ModifyMemberData */;
  /**
   * Channel Create, Edit, Delete
   */
  channel_target?: string;
  channel_data?: any /* api.CreateChannelData */;
  /**
   * Role Create, Edit, Delete
   */
  role_target?: string;
  role_data?: any /* api.CreateRoleData */;
  /**
   * Variable Set, Delete
   */
  variable_id?: string;
  variable_scope?: string;
  variable_value?: string;
  variable_operation?: VariableOperation;
  /**
   * HTTP Request
   */
  http_request_data?: HTTPRequestData;
  /**
   * AI Chat Completion
   */
  ai_chat_completion_data?: AIChatCompletionData;
  /**
   * Random Generate
   */
  random_min?: string;
  random_max?: string;
  /**
   * Event Entry
   */
  event_type?: string;
  /**
   * Event Filter
   */
  event_filter_target?: EventFilterTarget;
  event_filter_expression?: string;
  /**
   * Log
   */
  log_level?: LogLevel;
  log_message?: string;
  /**
   * Expression Evaluate
   */
  expression?: string;
  /**
   * Condition
   */
  condition_base_value?: string;
  condition_allow_multiple?: boolean;
  condition_item_mode?: ConditionItemType;
  condition_item_value?: string;
  /**
   * Loop
   */
  loop_count?: string;
  /**
   * Sleep
   */
  sleep_duration_seconds?: string;
}
export type LogLevel = string;
export const LogLevelDebug: LogLevel = "debug";
export const LogLevelInfo: LogLevel = "info";
export const LogLevelWarn: LogLevel = "warn";
export const LogLevelError: LogLevel = "error";
export type VariableOperation = string;
export const VariableOperationOverwrite: VariableOperation = "overwrite";
export const VariableOperationAppend: VariableOperation = "append";
export const VariableOperationPrepend: VariableOperation = "prepend";
export const VariableOperationIncrement: VariableOperation = "increment";
export const VariableOperationDecrement: VariableOperation = "decrement";
export type ConditionItemType = string;
export const ConditionItemModeEqual: ConditionItemType = "equal";
export const ConditionItemModeNotEqual: ConditionItemType = "not_equal";
export const ConditionItemModeGreaterThan: ConditionItemType = "greater_than";
export const ConditionItemModeGreaterThanOrEqual: ConditionItemType = "greater_than_or_equal";
export const ConditionItemModeLessThan: ConditionItemType = "less_than";
export const ConditionItemModeLessThanOrEqual: ConditionItemType = "less_than_or_equal";
export const ConditionItemModeContains: ConditionItemType = "contains";
/**
 * User condition
 */
export const ConditionItemModeHasRole: ConditionItemType = "has_role";
export const ConditionItemModeNotHasRole: ConditionItemType = "not_has_role";
export const ConditionItemModeHasPermission: ConditionItemType = "has_permission";
export const ConditionItemModeNotHasPermission: ConditionItemType = "not_has_permission";
export type CommandArgumentType = string;
export const CommandArgumentTypeString: CommandArgumentType = "string";
export const CommandArgumentTypeInteger: CommandArgumentType = "integer";
export const CommandArgumentTypeBoolean: CommandArgumentType = "boolean";
export const CommandArgumentTypeUser: CommandArgumentType = "user";
export const CommandArgumentTypeRole: CommandArgumentType = "role";
export const CommandArgumentTypeChannel: CommandArgumentType = "channel";
export const CommandArgumentTypeMentionable: CommandArgumentType = "mentionable";
export const CommandArgumentTypeNumber: CommandArgumentType = "number";
export const CommandArgumentTypeAttachment: CommandArgumentType = "attachment";
export type CommandContextType = string;
export const CommandContextTypeGuild: CommandContextType = "guild";
export const CommandContextTypeBotDM: CommandContextType = "bot_dm";
export const CommandContextTypePrivateChannel: CommandContextType = "private_channel";
export type CommandDisabledIntegrationType = string;
export const CommandDisabledIntegrationTypeGuildInstall: CommandDisabledIntegrationType = "guild_install";
export const CommandDisabledIntegrationTypeUserInstall: CommandDisabledIntegrationType = "user_install";
export type EventFilterTarget = string;
export const EventFilterTypeMessageContent: EventFilterTarget = "message_content";
export interface ModalData {
  title?: string;
  components?: ModalComponentData[];
}
export interface ModalComponentData {
  custom_id?: string;
  style?: number /* int */;
  label?: string;
  min_length?: number /* int */;
  max_length?: number /* int */;
  required?: boolean;
  value?: string;
  placeholder?: string;
  components?: ModalComponentData[];
}
export interface HTTPRequestData {
  url?: string;
  method?: string;
  headers?: HTTPRequestDataKeyValue[];
  query?: HTTPRequestDataKeyValue[];
  body_json?: Record<string, any> | null;
}
export interface HTTPRequestDataKeyValue {
  key: string;
  value: string;
}
export interface AIChatCompletionData {
  system_prompt?: string;
  prompt?: string;
  max_completion_tokens?: string;
}
export interface FlowNodePosition {
  x: number /* float64 */;
  y: number /* float64 */;
}
export interface FlowEdge {
  id: string;
  type?: string;
  source: string;
  target: string;
}

//////////
// source: provider_mock.go

export interface MockDiscordProvider {
}
export interface MockLogProvider {
}
export interface MockHTTPprovider {
}
export interface MockAIProvider {
}
export interface MockResumePointProvider {
}
